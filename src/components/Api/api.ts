/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.0.0 (NJsonSchema v10.3.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class DetectionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    detect(): Promise<AnalyzeObject> {
        let url_ = this.baseUrl + "/Detect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetect(_response);
        });
    }

    protected processDetect(response: Response): Promise<AnalyzeObject> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnalyzeObject.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AnalyzeObject>(<any>null);
    }
}

export class AnalyzeObject implements IAnalyzeObject {
    data?: string;
    totalCount?: number;
    detected?: number;
    matches?: Match[];

    constructor(data?: IAnalyzeObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.totalCount = _data["totalCount"];
            this.detected = _data["detected"];
            if (Array.isArray(_data["matches"])) {
                this.matches = [] as any;
                for (let item of _data["matches"])
                    this.matches!.push(Match.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnalyzeObject {
        data = typeof data === 'object' ? data : {};
        let result = new AnalyzeObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["totalCount"] = this.totalCount;
        data["detected"] = this.detected;
        if (Array.isArray(this.matches)) {
            data["matches"] = [];
            for (let item of this.matches)
                data["matches"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAnalyzeObject {
    data?: string;
    totalCount?: number;
    detected?: number;
    matches?: Match[];
}

export class Match implements IMatch {
    uId?: string;
    value?: number;
    color?: Colors;
    type?: CarTypes;

    constructor(data?: IMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.uId = _data["uId"];
            this.value = _data["value"];
            this.color = _data["color"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Match {
        data = typeof data === 'object' ? data : {};
        let result = new Match();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uId"] = this.uId;
        data["value"] = this.value;
        data["color"] = this.color;
        data["type"] = this.type;
        return data; 
    }
}

export interface IMatch {
    uId?: string;
    value?: number;
    color?: Colors;
    type?: CarTypes;
}

export enum Colors {
    Black = 0,
    White = 1,
    Red = 2,
    Green = 3,
    Grey = 4,
}

export enum CarTypes {
    Sedan = 0,
    Coupe = 1,
    SportCar = 2,
    StationWagon = 3,
    Hatchback = 4,
    Convertible = 5,
    SUV = 6,
    Minivan = 7,
    PickupTruck = 8,
    Trunk = 9,
    Unidentified = 10,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}